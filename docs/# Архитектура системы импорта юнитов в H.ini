# Архитектура системы импорта юнитов в Homio

## 1. Общий обзор архитектуры

Система импорта юнитов в Homio представляет собой комплексное решение для загрузки, валидации, сопоставления и обработки данных о юнитах (квартирах, виллах и других объектах недвижимости) в проектах. Архитектура системы построена с учетом гибкости, масштабируемости и удобства использования.

### Основные компоненты системы:

1. **API-интерфейсы** - набор эндпоинтов для взаимодействия с системой импорта
2. **Сопоставление полей (Field Mapping)** - механизм для сопоставления полей из импортируемых данных с полями в базе данных
3. **Обработка импорта** - логика для создания и обновления юнитов на основе импортированных данных
4. **Хранение истории импорта** - механизм для отслеживания истории импорта и версионирования юнитов
5. **Автоматизированный импорт** - система для автоматического импорта данных без взаимодействия с пользователем

## 2. Структура базы данных

### Основные таблицы для системы импорта:

#### UnitFieldMapping
```
- id: string (PK)
- projectId: string (FK -> Project)
- userId: string (FK -> User)
- name: string
- mappings: JSON
- isDefault: boolean
- isApproved: boolean
- createdAt: DateTime
- updatedAt: DateTime
```

#### UnitImport
```
- id: string (PK)
- projectId: string (FK -> Project)
- fieldMappingId: string (FK -> UnitFieldMapping)
- importedBy: string
- importDate: DateTime
- totalUnits: number
- createdUnits: number
- updatedUnits: number
- skippedUnits: number
- processed: boolean
- rawData: JSON
- currency: string
- priceUpdateDate: DateTime
```

#### UnitVersion
```
- id: string (PK)
- unitId: string (FK -> Unit)
- importId: string (FK -> UnitImport)
- number: string
- floor: number
- buildingId: string
- price: number
- status: enum
- area: number
- description: string
- windowView: string
- metadata: JSON
- createdAt: DateTime
```

#### Unit
```
- id: string (PK)
- projectId: string (FK -> Project)
- buildingId: string (FK -> Building)
- layoutId: string (FK -> UnitLayout)
- name: string
- number: string
- floor: number
- price: number
- discountPrice: number
- status: enum
- area: number
- bedrooms: number
- bathrooms: number
- description: string
- view: string
- createdAt: DateTime
- updatedAt: DateTime
```

## 3. API-интерфейсы

### 3.1. Управление сопоставлением полей

#### GET /api/projects/:id/field-mappings
Получение списка сопоставлений полей для проекта.

**Ответ:**
```json
{
  "data": [
    {
      "id": "mapping-id-1",
      "name": "Default Mapping",
      "mappings": { "Unit_Number": "unit_number", ... },
      "isDefault": true,
      "isApproved": true,
      "createdAt": "2023-01-01T00:00:00Z"
    },
    ...
  ]
}
```

#### POST /api/projects/:id/field-mappings
Создание нового сопоставления полей.

**Запрос:**
```json
{
  "name": "New Mapping",
  "mappings": {
    "Unit_Number": "unit_number",
    "Building": "building",
    "Floor": "floor_number",
    ...
  },
  "isDefault": false,
  "isApproved": false
}
```

#### PUT /api/projects/:id/field-mappings?id=:mappingId
Обновление существующего сопоставления полей.

#### DELETE /api/projects/:id/field-mappings?id=:mappingId
Удаление сопоставления полей.

#### PATCH /api/projects/:id/field-mappings/approve?id=:mappingId
Утверждение конфигурации сопоставления полей.

### 3.2. Управление импортом

#### POST /api/projects/:id/units/import
Импорт юнитов с использованием выбранного сопоставления полей.

**Запрос:**
```json
{
  "data": [
    {
      "Unit_Number": "A101",
      "Building": "A",
      "Floor": 1,
      ...
    },
    ...
  ],
  "fieldMappingId": "mapping-id-1",
  "updateExisting": true,
  "currency": "USD",
  "priceUpdateDate": "2023-01-01"
}
```

#### GET /api/projects/:id/units/import/pending
Получение списка ожидающих импортов для проекта.

**Ответ:**
```json
{
  "data": [
    {
      "id": "import-id-1",
      "mappingId": "mapping-id-1",
      "createdAt": "2023-01-01T00:00:00Z",
      "totalUnits": 100,
      "importedBy": "user@example.com",
      "sampleData": [...]
    },
    ...
  ]
}
```

#### POST /api/projects/:id/units/import/process-pending?importId=:importId
Обработка ожидающего импорта после утверждения сопоставления полей.

### 3.3. Автоматизированный импорт

#### POST /api/projects/:id/units/import/automated
Автоматический импорт юнитов без взаимодействия с пользователем.

**Запрос:**
```json
{
  "data": [
    {
      "unit_number": "A101",
      "building": "A",
      "floor_number": 1,
      ...
    },
    ...
  ],
  "updateExisting": true,
  "defaultBuildingId": "building-id-1",
  "currency": "USD",
  "priceUpdateDate": "2023-01-01",
  "fieldMappingId": "mapping-id-1"
}
```

**Заголовки:**
```
x-api-token: YOUR_API_TOKEN
```

## 4. Процесс импорта

### 4.1. Стандартный процесс импорта

1. **Загрузка данных** - пользователь загружает файл с данными (CSV, Excel, JSON)
2. **Предварительный анализ** - система анализирует структуру данных и предлагает сопоставление полей
3. **Настройка сопоставления** - пользователь настраивает сопоставление полей или выбирает существующее
4. **Валидация данных** - система проверяет данные на корректность
5. **Предварительный просмотр** - пользователь видит предварительный результат импорта
6. **Подтверждение импорта** - пользователь подтверждает импорт
7. **Обработка данных** - система создает или обновляет юниты
8. **Отчет о результатах** - система предоставляет отчет о результатах импорта

### 4.2. Автоматизированный процесс импорта

1. **Получение данных через API** - система получает данные через API-запрос
2. **Проверка API-токена** - система проверяет валидность API-токена
3. **Поиск сопоставления полей** - система ищет утвержденное сопоставление полей для проекта
4. **Создание автоматического сопоставления** - если сопоставление не найдено, система создает автоматическое сопоставление
5. **Ожидание утверждения** - если требуется утверждение, импорт помещается в очередь ожидания
6. **Обработка данных** - система создает или обновляет юниты
7. **Возврат результата** - система возвращает результат импорта

## 5. Механизм сопоставления полей

### 5.1. Структура сопоставления полей

Сопоставление полей хранится в формате JSON и представляет собой объект, где ключи - это имена полей в импортируемых данных, а значения - это имена полей в базе данных.

```json
{
  "Unit_Number": "unit_number",
  "Building": "building",
  "Floor": "floor_number",
  "Unit Description": "unit_description",
  "Layout_ID": "layout_id",
  "View": "view_description",
  "Base_Price (Excluding VAT)": "base_price_excl_vat",
  "Final_Price (Including VAT)": "final_price_incl_vat",
  "Discount_Price": "discount_price",
  "Availability Status": "availability_status",
  "Ownership": "ownership"
}
```

### 5.2. Автоматическое сопоставление полей

Система может автоматически сопоставлять поля на основе их имен. Для этого используются ключевые слова и алгоритмы нечеткого сопоставления.

```typescript
// Ключевые слова для умного сопоставления полей
const FIELD_KEYWORDS: Record<string, string[]> = {
  unit_number: ["number", "unit number", "unit", "unit no", "no", "номер", "№", "unit id", "id"],
  floor_number: ["floor", "этаж", "level", "floor number", "floor no", "storey", "story"],
  building: ["building", "здание", "tower", "block", "корпус", "башня", "блок"],
  // ...и т.д.
};
```

### 5.3. Утверждение сопоставления полей

Сопоставление полей может требовать утверждения перед использованием. Это позволяет контролировать качество импортируемых данных.

## 6. Обработка данных

### 6.1. Создание и обновление юнитов

При импорте данных система может создавать новые юниты или обновлять существующие. Решение о создании или обновлении принимается на основе уникального идентификатора юнита (обычно это номер юнита и идентификатор здания).

```typescript
// Пример логики создания/обновления юнита
if (existingUnit && updateExisting) {
  // Обновляем существующий юнит
  await tx.unit.update({
    where: { id: existingUnit.id },
    data: {
      // ...данные для обновления
    }
  });
} else if (!existingUnit) {
  // Создаем новый юнит
  const newUnit = await tx.unit.create({
    data: {
      // ...данные для создания
    }
  });
}
```

### 6.2. Версионирование юнитов

Система хранит историю изменений юнитов, создавая новую версию при каждом обновлении. Это позволяет отслеживать изменения и при необходимости восстанавливать предыдущие версии.

```typescript
// Создание версии юнита
await tx.unitVersion.create({
  data: {
    unitId: unitId,
    importId: importRecord.id,
    number: unitNumber,
    floor: floorNumber,
    buildingId: buildingId,
    price: price,
    status: status,
    area: area,
    description: description,
    windowView: view,
    metadata: originalData // Сохраняем все исходные поля
  }
});
```

## 7. Обработка ошибок и валидация

### 7.1. Валидация данных

Система валидирует импортируемые данные перед их обработкой. Валидация включает проверку обязательных полей, типов данных, диапазонов значений и т.д.

```typescript
// Пример валидации с использованием Zod
const automatedImportSchema = z.object({
  data: z.array(z.record(z.any())).min(1, "At least one unit is required"),
  updateExisting: z.boolean().default(false),
  defaultBuildingId: z.string().optional(),
  currency: z.string().optional(),
  priceUpdateDate: z.string().optional(),
  fieldMappingId: z.string().optional(),
});
```

### 7.2. Обработка ошибок

Система обрабатывает ошибки, возникающие при импорте, и предоставляет информативные сообщения об ошибках.

```typescript
try {
  // Код импорта
} catch (error) {
  console.error("Error processing unit:", error, unit);
  results.errors.push(`Error processing unit: ${error}`);
  results.skipped++;
}
```

## 8. Безопасность

### 8.1. Аутентификация и авторизация

Система требует аутентификации для доступа к API-интерфейсам. Для автоматизированного импорта используется API-токен.

```typescript
// Проверка API токена
const authHeader = request.headers.get("x-api-token");
if (!API_TOKEN || authHeader !== API_TOKEN) {
  return NextResponse.json(
    { error: "unauthorized", message: "Invalid API token" },
    { status: 401 }
  );
}
```

### 8.2. Проверка прав доступа

Система проверяет права доступа пользователя перед выполнением операций.

```typescript
// Проверка прав доступа
if (existingMapping.userId !== session.user.id && session.user.role !== "ADMIN") {
  return NextResponse.json(
    { error: "forbidden", message: "You don't have permission to update this mapping" },
    { status: 403 }
  );
}
```

## 9. Рекомендации по использованию

### 9.1. Формат данных для импорта

Для наилучшей совместимости рекомендуется использовать следующий формат данных для импорта:

```json
{
  "data": [
    {
      "unit_number": "A101",
      "building": "A",
      "floor_number": 1,
      "unit_description": "One Bedroom",
      "layout_id": "1BR",
      "view_description": "Sea View",
      "base_price_excl_vat": 100000,
      "final_price_incl_vat": 107000,
      "discount_price": 95000,
      "availability_status": "Available",
      "ownership": "Freehold",
      "area": 50,
      "bedrooms": 1,
      "bathrooms": 1
    },
    ...
  ],
  "updateExisting": true,
  "currency": "USD",
  "priceUpdateDate": "2023-01-01"
}
```

### 9.2. Рекомендации по сопоставлению полей

При создании сопоставления полей рекомендуется:

1. Использовать понятные и описательные имена для сопоставлений
2. Включать все необходимые поля в сопоставление
3. Проверять результаты автоматического сопоставления
4. Создавать отдельные сопоставления для разных форматов данных

### 9.3. Рекомендации по автоматизированному импорту

При использовании автоматизированного импорта рекомендуется:

1. Создать и утвердить сопоставление полей заранее
2. Использовать стандартные имена полей
3. Обеспечить чистоту и корректность данных
4. Тестировать импорт на небольшом наборе данных перед массовым импортом

## 10. Расширение и кастомизация

### 10.1. Добавление новых полей

Для добавления новых полей в систему импорта необходимо:

1. Обновить схему базы данных (добавить поля в таблицу Unit)
2. Обновить механизм сопоставления полей (добавить новые ключевые слова)
3. Обновить логику обработки данных (добавить обработку новых полей)

### 10.2. Интеграция с внешними системами

Система импорта может быть интегрирована с внешними системами через API-интерфейсы. Для этого необходимо:

1. Настроить аутентификацию и авторизацию
2. Создать и утвердить сопоставление полей
3. Настроить периодический импорт данных

## 11. Мониторинг и отладка

### 11.1. Логирование

Система логирует все операции импорта, что позволяет отслеживать процесс импорта и выявлять проблемы.

```typescript
console.log("Starting import process...");
console.error("Error processing unit:", error);
```

### 11.2. Отчеты об импорте

Система генерирует отчеты о результатах импорта, включая количество созданных, обновленных и пропущенных юнитов, а также информацию об ошибках.

```json
{
  "success": true,
  "data": {
    "totalProcessed": 100,
    "created": 80,
    "updated": 15,
    "skipped": 5,
    "errors": ["Error processing unit: Invalid price"]
  }
}
```

## 12. Заключение

Система импорта юнитов в Homio представляет собой гибкое и мощное решение для управления данными о юнитах в проектах недвижимости. Она обеспечивает удобство использования, гибкость настройки и надежность обработки данных.

Ключевые преимущества системы:

1. **Гибкость** - поддержка различных форматов данных и настраиваемое сопоставление полей
2. **Автоматизация** - возможность автоматического импорта данных без взаимодействия с пользователем
3. **Версионирование** - хранение истории изменений юнитов
4. **Безопасность** - аутентификация, авторизация и проверка прав доступа
5. **Масштабируемость** - возможность расширения и кастомизации системы

Эта архитектура обеспечивает эффективное управление данными о юнитах в проектах недвижимости и может быть адаптирована под различные потребности бизнеса.
