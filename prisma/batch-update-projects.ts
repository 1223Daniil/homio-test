import {
  BuildingStatus,
  PrismaClient,
  ProjectClass,
  ProjectStatus,
  ProjectType
} from "@prisma/client";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
const prisma = new PrismaClient();

// –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
// –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const projectUpdates = [
  {
    id: "18796fe3-6a00-44c3-bef3-aa8c85ddc508", // Adora Rawai
    data: {
      status: "ACTIVE" as ProjectStatus,
      buildingStatus: "UNDER_CONSTRUCTION" as BuildingStatus,
      constructionStatus: 30,
      translations: [
        {
          language: "en",
          name: "Adora Rawai",
          description:
            "Luxury residence in the beautiful area of Rawai, Phuket."
        },
        {
          language: "ru",
          name: "–ê–¥–æ—Ä–∞ –†–∞–≤–∞–∏",
          description: "–†–æ—Å–∫–æ—à–Ω–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏—è –≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º —Ä–∞–π–æ–Ω–µ –†–∞–≤–∞–∏, –ü—Ö—É–∫–µ—Ç."
        }
      ]
    }
  },
  {
    id: "380034a6-c26b-42bc-9ed1-46388fd94d03", // The ONE Naiharn
    data: {
      status: "ACTIVE" as ProjectStatus,
      constructionStatus: 85, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      translations: [
        {
          language: "en",
          name: "The ONE Naiharn",
          description:
            "Premium condominium project near Naiharn beach with stunning sea views."
        },
        {
          language: "ru",
          name: "–ó–µ –í–∞–Ω –ù–∞–π—Ö–∞—Ä–Ω",
          description:
            "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω–¥–æ–º–∏–Ω–∏—É–º —Ä—è–¥–æ–º —Å –ø–ª—è–∂–µ–º –ù–∞–π—Ö–∞—Ä–Ω —Å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ."
        }
      ]
    }
  },
  {
    id: "3db9cebe-9e35-4216-aa7a-4def47301ea8", // VIP Space Odyssey Condominium
    data: {
      status: "ACTIVE" as ProjectStatus,
      class: "PREMIUM" as ProjectClass, // –ü–æ–≤—ã—à–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä–æ–µ–∫—Ç–∞
      buildingStatus: "UNDER_CONSTRUCTION" as BuildingStatus,
      constructionStatus: 25,
      translations: [
        {
          language: "en",
          name: "VIP Space Odyssey Condominium",
          description:
            "Modern condominium with futuristic design and premium facilities."
        },
        {
          language: "ru",
          name: "–í–ò–ü –°–ø–µ–π—Å –û–¥–∏—Å—Å–µ–π –ö–æ–Ω–¥–æ–º–∏–Ω–∏—É–º",
          description:
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω–¥–æ–º–∏–Ω–∏—É–º —Å —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ —É–¥–æ–±—Å—Ç–≤–∞–º–∏."
        }
      ]
    }
  }
];

async function updateProject(projectId: string, projectData: any) {
  try {
    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
    const baseData = { ...projectData };
    delete baseData.translations;

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    const updatedProject = await prisma.project.update({
      where: { id: projectId },
      data: baseData
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    if (projectData.translations && projectData.translations.length > 0) {
      for (const translation of projectData.translations) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–≤–æ–¥
        const existingTranslation = await prisma.projectTranslation.findFirst({
          where: {
            projectId,
            language: translation.language
          }
        });

        if (existingTranslation) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥
          await prisma.projectTranslation.update({
            where: {
              id: existingTranslation.id
            },
            data: {
              name: translation.name,
              description: translation.description
            }
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
          await prisma.projectTranslation.create({
            data: {
              projectId,
              language: translation.language,
              name: translation.name,
              description: translation.description
            }
          });
        }
      }
    }

    return updatedProject;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`, error);
    throw error;
  }
}

async function main() {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...");

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ
    for (const projectUpdate of projectUpdates) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç ${projectUpdate.id}...`);
      const updatedProject = await updateProject(
        projectUpdate.id,
        projectUpdate.data
      );
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç ${updatedProject.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
main()
  .then(() => console.log("üéâ –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"))
  .catch(e => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e);
    process.exit(1);
  });
