import { PrismaClient } from "@prisma/client";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma
const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL
function sanitizeUrl(url: string): string | null {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ URL —Å blob:
  if (url.startsWith("blob:")) {
    console.warn(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω blob URL: ${url}`);
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—ã–π URL, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–Ω—É—Ç—Ä–∏ blob URL
    const matches = url.match(/https:\/\/storage\.yandexcloud\.net\/[^"')\s]+/);
    if (matches && matches[0]) {
      console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º blob URL –Ω–∞: ${matches[0]}`);
      return matches[0];
    }
    return null; // –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å URL
  }

  return null; // URL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
}

async function fixBlobUrls() {
  try {
    console.log("üîç –ü–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ blob URLs –≤ —Ç–∞–±–ª–∏—Ü–µ ProjectMedia...");

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å blob:
    const blobUrls = await prisma.projectMedia.findMany({
      where: {
        url: {
          startsWith: "blob:"
        }
      },
      select: {
        id: true,
        url: true,
        projectId: true,
        title: true
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${blobUrls.length} –∑–∞–ø–∏—Å–µ–π —Å blob URLs`);

    // –ï—Å–ª–∏ –Ω–µ—Ç blob URLs, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    if (blobUrls.length === 0) {
      console.log("‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å blob URLs –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
      return;
    }

    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let updatedCount = 0;
    let errorCount = 0;
    let cannotFixCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    for (const record of blobUrls) {
      try {
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ ID=${record.id} ---`);
        console.log(`ProjectID: ${record.projectId}`);
        console.log(`Title: ${record.title}`);
        console.log(`–¢–µ–∫—É—â–∏–π URL: ${record.url}`);

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å URL
        const fixedUrl = sanitizeUrl(record.url);

        if (fixedUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await prisma.projectMedia.update({
            where: { id: record.id },
            data: { url: fixedUrl }
          });

          console.log(`‚úÖ URL —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
          updatedCount++;
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
          cannotFixCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ ID=${record.id}:`, error);
        errorCount++;
      }
    }

    console.log("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${updatedCount} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: ${cannotFixCount} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –∑–∞–ø–∏—Å–µ–π`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ blob URLs:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
fixBlobUrls()
  .then(() => console.log("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ blob URLs –∑–∞–≤–µ—Ä—à–µ–Ω–æ"))
  .catch(e => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e);
    process.exit(1);
  });
