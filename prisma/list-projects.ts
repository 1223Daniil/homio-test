import { PrismaClient } from "@prisma/client";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
const prisma = new PrismaClient();

async function main() {
  try {
    console.log("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...");

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∏—Ö –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const projects = await prisma.project.findMany({
      select: {
        id: true,
        name: true,
        status: true,
        type: true,
        class: true,
        buildingStatus: true,
        constructionStatus: true,
        translations: {
          select: {
            language: true,
            name: true
          }
        },
        developer: {
          select: {
            id: true,
            translations: {
              select: {
                language: true,
                name: true
              }
            }
          }
        }
      },
      take: 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞
    });

    console.log("üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:", projects.length);

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    projects.forEach((project, index) => {
      console.log(`\n--- –ü—Ä–æ–µ–∫—Ç ${index + 1} ---`);
      console.log(`ID: ${project.id}`);
      console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
      console.log(`–°—Ç–∞—Ç—É—Å: ${project.status}`);
      console.log(`–¢–∏–ø: ${project.type}`);
      console.log(`–ö–ª–∞—Å—Å: ${project.class}`);
      console.log(`–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ${project.buildingStatus}`);
      console.log(
        `–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ${project.constructionStatus || "–ù–µ —É–∫–∞–∑–∞–Ω"}`
      );

      if (project.translations && project.translations.length > 0) {
        console.log("–ü–µ—Ä–µ–≤–æ–¥—ã:");
        project.translations.forEach(translation => {
          console.log(`  - ${translation.language}: ${translation.name}`);
        });
      }

      if (project.developer) {
        console.log("–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫:");
        console.log(`  ID: ${project.developer.id}`);

        if (
          project.developer.translations &&
          project.developer.translations.length > 0
        ) {
          project.developer.translations.forEach(translation => {
            console.log(`  - ${translation.language}: ${translation.name}`);
          });
        }
      }
    });

    // –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const totalCount = await prisma.project.count();
    console.log(`\nüìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${totalCount}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
main()
  .then(() => console.log("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω"))
  .catch(e => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e);
    process.exit(1);
  });
