import { PrismaClient, ProjectStatus } from "@prisma/client";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma
const prisma = new PrismaClient();

async function main() {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º DRAFT...");

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º DRAFT
    const draftProjects = await prisma.project.findMany({
      where: {
        status: "DRAFT"
      },
      select: {
        id: true,
        name: true,
        translations: {
          select: {
            language: true,
            name: true
          }
        }
      }
    });

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ ${draftProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º DRAFT`
    );

    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    draftProjects.forEach((project, index) => {
      const projectName =
        project.name ||
        (project.translations?.length > 0
          ? project.translations[0].name
          : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è");
      console.log(`${index + 1}. ID: ${project.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${projectName}`);
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log(
      "\n‚ö†Ô∏è –í—Å–µ —ç—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞ DRAFT –Ω–∞ ACTIVE"
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å DRAFT –Ω–∞ ACTIVE
    const updatedProjects = await prisma.project.updateMany({
      where: {
        status: "DRAFT"
      },
      data: {
        status: "ACTIVE" as ProjectStatus
      }
    });

    console.log(
      `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedProjects.count} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞ DRAFT –Ω–∞ ACTIVE`
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
main()
  .then(() => console.log("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"))
  .catch(e => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e);
    process.exit(1);
  });
