import Papa from "papaparse";
import { PrismaClient } from "@prisma/client";
import fs from "fs";
import path from "path";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma
const prisma = new PrismaClient();

// –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
const csvFilePath = path.resolve(
  process.cwd(),
  "ProjectMedia__202503251127.csv"
);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
interface ProjectMediaCSV {
  id: string;
  projectId: string;
  type: string;
  url: string;
  title: string;
  description: string;
  category: string;
  order: string;
  createdAt: string;
  updatedAt: string;
  isCover: string;
  isMainVideo: string;
  metadata: string;
  thumbnailUrl: string;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL
function sanitizeUrl(url: string): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ URL —Å blob:
  if (url.startsWith("blob:")) {
    console.warn(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω blob URL: ${url}`);
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—ã–π URL, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–Ω—É—Ç—Ä–∏ blob URL
    const matches = url.match(/https:\/\/storage\.yandexcloud\.net\/[^"')\s]+/);
    if (matches && matches[0]) {
      console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º blob URL –Ω–∞: ${matches[0]}`);
      return matches[0];
    }
    return url;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
  if (!url.includes("storage.yandexcloud.net")) {
    console.warn(`‚ö†Ô∏è URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${url}`);
  }

  return url;
}

async function updateProjectMedia() {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(csvFilePath)) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvFilePath}`);
      return;
    }

    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvFile = fs.readFileSync(csvFilePath, "utf8");

    // –ü–∞—Ä—Å–∏–º CSV
    const { data, errors } = Papa.parse<ProjectMediaCSV>(csvFile, {
      header: true,
      skipEmptyLines: true
    });

    if (errors.length > 0) {
      console.error("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV:", errors);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –≤ CSV —Ñ–∞–π–ª–µ`);

    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let updatedCount = 0;
    let errorCount = 0;
    let skippedCount = 0;
    let blobUrlsFound = 0;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    const existingMediaIds = await prisma.projectMedia.findMany({
      select: { id: true }
    });
    const existingIds = new Set(existingMediaIds.map(item => item.id));
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingIds.size} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for (const record of data) {
      try {
        if (!record.id || !record.url) {
          console.warn(
            `‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ ID –∏–ª–∏ URL: ${JSON.stringify(record)}`
          );
          skippedCount++;
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (!existingIds.has(record.id)) {
          console.warn(
            `‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å ID=${record.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`
          );
          skippedCount++;
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º URL
        const sanitizedUrl = sanitizeUrl(record.url);
        if (sanitizedUrl !== record.url) {
          blobUrlsFound++;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await prisma.projectMedia.update({
          where: { id: record.id },
          data: { url: sanitizedUrl }
        });

        updatedCount++;

        // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        if (updatedCount % 10 === 0) {
          console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∑–∞–ø–∏—Å–µ–π...`);
        }
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ ID=${record.id}:`,
          error
        );
        errorCount++;
      }
    }

    console.log("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üßπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ blob URL: ${blobUrlsFound} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –∑–∞–ø–∏—Å–µ–π`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
updateProjectMedia()
  .then(() => console.log("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"))
  .catch(e => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e);
    process.exit(1);
  });
