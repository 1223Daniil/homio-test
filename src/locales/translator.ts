import axios from "axios";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY || "";
const DEEPSEEK_API_URL =
  process.env.DEEPSEEK_API_URL || "https://api.deepseek.com";
const CHUNK_SIZE = 5000; // –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)
const MAX_RETRIES = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
const RETRY_DELAY = 2000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
const LOCALES_DIR = path.join(process.cwd(), "src/locales");

interface TranslationOptions {
  sourceFile: string;
  targetFile: string;
  targetLanguage: string;
  chunkSize?: number;
}

/**
 * –†–∞–∑–¥–µ–ª—è–µ—Ç JSON –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function splitJsonToChunks(
  json: object,
  chunkSize: number = CHUNK_SIZE
): string[] {
  const jsonString = JSON.stringify(json, null, 2);
  const chunks: string[] = [];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
  function splitStringToChunks(str: string, size: number): string[] {
    const result: string[] = [];
    let currentChunk = "";
    let currentSize = 0;
    let openBraces = 0;
    let openBrackets = 0;

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –ø–æ —Å—Ç—Ä–æ–∫–µ
    for (let i = 0; i < str.length; i++) {
      const char = str[i];
      currentChunk += char;
      currentSize++;

      // –°—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
      if (char === "{") openBraces++;
      else if (char === "}") openBraces--;
      else if (char === "[") openBrackets++;
      else if (char === "]") openBrackets--;

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞–Ω–∫
      if (
        currentSize >= size &&
        openBraces === 0 &&
        openBrackets === 0 &&
        (i === str.length - 1 ||
          str[i + 1] === "," ||
          str[i + 1] === "}" ||
          str[i + 1] === "]")
      ) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ –≤—Å–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø—è—Ç–æ–π/–∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        let j = i + 1;
        while (
          j < str.length &&
          str[j] !== "," &&
          str[j] !== "}" &&
          str[j] !== "]"
        ) {
          currentChunk += str[j];
          j++;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è, –¥–æ–±–∞–≤–∏–º –µ–µ
        if (j < str.length && str[j] === ",") {
          currentChunk += ",";
        }

        result.push(currentChunk);
        currentChunk = "";
        currentSize = 0;
        i = j;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentChunk.trim()) {
      result.push(currentChunk);
    }

    return result;
  }

  // –ï—Å–ª–∏ JSON –æ–±—ä–µ–∫—Ç, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
  if (jsonString.startsWith("{")) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
    const content = jsonString.slice(1, -1).trim();
    if (content) {
      const parts = splitStringToChunks(content, chunkSize);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∫ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
      parts.forEach(part => {
        chunks.push(`{${part}}`);
      });
    } else {
      chunks.push("{}");
    }
  } else {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
    let i = 0;
    while (i < jsonString.length) {
      chunks.push(jsonString.slice(i, i + chunkSize));
      i += chunkSize;
    }
  }

  return chunks;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏—Å—Ö–æ–¥–Ω—ã–º –∫–ª—é—á–∞–º
 */
function verifyTranslationKeys(
  source: object,
  translation: object
): { isValid: boolean; missingKeys: string[] } {
  const sourceKeys = getAllKeys(source);
  const translationKeys = getAllKeys(translation);

  const missingKeys = sourceKeys.filter(key => !translationKeys.includes(key));

  return {
    isValid: missingKeys.length === 0,
    missingKeys
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ) –≤ —Ñ–æ—Ä–º–∞—Ç–µ "parent.child.grandchild"
 */
function getAllKeys(obj: any, prefix = ""): string[] {
  let keys: string[] = [];

  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const newKey = prefix ? `${prefix}.${key}` : key;
      if (typeof obj[key] === "object" && obj[key] !== null) {
        keys = keys.concat(getAllKeys(obj[key], newKey));
      } else {
        keys.push(newKey);
      }
    }
  }

  return keys;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
 */
async function translateWithDeepSeek(
  text: string,
  targetLanguage: string
): Promise<string> {
  try {
    const response = await axios.post(
      `${DEEPSEEK_API_URL}/v1/chat/completions`,
      {
        model: "deepseek-chat",
        messages: [
          {
            role: "system",
            content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π JSON —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ ${targetLanguage}. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–∏ JSON –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏, –ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.`
          },
          {
            role: "user",
            content: text
          }
        ]
      },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${DEEPSEEK_API_KEY}`
        }
      }
    );

    const translatedText = response.data.choices[0].message.content;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –≤–∞–ª–∏–¥–Ω—ã–π JSON
    try {
      JSON.parse(translatedText);
      return translatedText;
    } catch (err) {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –Ω–µ–≥–æ
      const jsonMatch =
        translatedText.match(/```json([\s\S]*?)```/) ||
        translatedText.match(/```([\s\S]*?)```/) ||
        translatedText.match(/\{[\s\S]*\}/);

      if (jsonMatch && jsonMatch[0]) {
        const extractedJson = jsonMatch[1]
          ? jsonMatch[1].trim()
          : jsonMatch[0].trim();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –≤–∞–ª–∏–¥–Ω—ã–π JSON
        JSON.parse(extractedJson);
        return extractedJson;
      }

      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞");
    }
  } catch (err) {
    const error = err as Error;
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API:", error.message);
    if (axios.isAxiosError(err) && err.response) {
      console.error("–û—Ç–≤–µ—Ç API:", err.response.data);
    }
    throw error;
  }
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç JSON —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function translateLocalizationFile(
  options: TranslationOptions
): Promise<void> {
  const {
    sourceFile,
    targetFile,
    targetLanguage,
    chunkSize = CHUNK_SIZE
  } = options;

  try {
    console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${sourceFile}`);
    const sourceData = JSON.parse(fs.readFileSync(sourceFile, "utf8"));

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ
    fs.writeFileSync(targetFile, "{}", "utf8");

    // –†–∞–∑–¥–µ–ª—è–µ–º JSON –Ω–∞ —á–∞—Å—Ç–∏
    const chunks = splitJsonToChunks(sourceData, chunkSize);
    console.log(`üìä –§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π`);

    let resultJson = {};

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    for (let i = 0; i < chunks.length; i++) {
      console.log(`‚è≥ –ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–∏ ${i + 1}/${chunks.length}`);
      const chunkJson = JSON.parse(chunks[i]);

      let translatedChunkText = "";
      let success = false;
      let attempts = 0;

      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      while (!success && attempts < MAX_RETRIES) {
        try {
          attempts++;
          translatedChunkText = await translateWithDeepSeek(
            chunks[i],
            targetLanguage
          );
          success = true;
        } catch (err) {
          const error = err as Error;
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —á–∞—Å—Ç–∏ ${i + 1}, –ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${MAX_RETRIES}: ${error.message}`
          );

          if (attempts < MAX_RETRIES) {
            console.log(
              `‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ ${RETRY_DELAY / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`
            );
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
          } else {
            throw new Error(
              `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å ${i + 1} –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫`
            );
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π JSON –≤–∞–ª–∏–¥–Ω—ã–π
      try {
        const translatedChunk = JSON.parse(translatedChunkText);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        const verification = verifyTranslationKeys(chunkJson, translatedChunk);
        if (!verification.isValid) {
          console.warn(
            `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤ –ø–µ—Ä–µ–≤–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: ${verification.missingKeys.join(", ")}`
          );
          console.log("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–π —á–∞—Å—Ç–∏...");
          i--; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–π —á–∞—Å—Ç–∏
          continue;
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        resultJson = { ...resultJson, ...translatedChunk };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        fs.writeFileSync(
          targetFile,
          JSON.stringify(resultJson, null, 2),
          "utf8"
        );
        console.log(
          `‚úÖ –ß–∞—Å—Ç—å ${i + 1}/${chunks.length} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`
        );
      } catch (err) {
        const error = err as Error;
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ JSON —á–∞—Å—Ç–∏ ${i + 1}: ${error.message}`
        );
        console.log("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–π —á–∞—Å—Ç–∏...");
        i--; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–π —á–∞—Å—Ç–∏
      }
    }

    console.log(`üéâ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${targetFile}`);
  } catch (err) {
    const error = err as Error;
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ñ–∞–π–ª–∞: ${error.message}`);
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const args = process.argv.slice(2);
  const usage = `
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
  ts-node translator.ts [—è–∑—ã–∫] [–∏—Å—Ö–æ–¥–Ω—ã–π-—Ñ–∞–π–ª] [—Ü–µ–ª–µ–≤–æ–π-—Ñ–∞–π–ª]

–ü—Ä–∏–º–µ—Ä—ã:
  ts-node translator.ts en src/locales/ru.json src/locales/en.json
  ts-node translator.ts th src/locales/ru.json src/locales/th.json
  `;

  if (args.length < 1) {
    console.log(usage);
    process.exit(1);
  }

  const targetLanguage = args[0];
  const sourceFile = args[1] || path.join(LOCALES_DIR, "ru.json");
  const targetFile =
    args[2] || path.join(LOCALES_DIR, `${targetLanguage}.json`);

  console.log(`
üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
------------------------------
–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${sourceFile}
–¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: ${targetFile}
–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: ${targetLanguage}
------------------------------
  `);

  try {
    await translateLocalizationFile({
      sourceFile,
      targetFile,
      targetLanguage,
      chunkSize: CHUNK_SIZE
    });
  } catch (err) {
    const error = err as Error;
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if (require.main === module) {
  main();
}

export { translateLocalizationFile };
